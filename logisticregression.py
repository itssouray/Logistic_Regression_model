# -*- coding: utf-8 -*-
"""LogisticRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13qf__22OzPYkuufNijoGG5PoDP6utZiD
"""

import numpy as np

class logistic_regression:

  def __init__(self,learning_rate,no_of_iteration):
    self.learning_rate = learning_rate
    self.no_of_iteration = no_of_iteration


  # this function is used to train our model with dataset
  def fit(self,X,Y):
    
    # number of datapoints in the dataset (no of rows) --> m
    # number of features in the dataset (no of columns) --> n
    self.m, self.n = X.shape

    # initialising weight and bias
    self.w = np.zeros(self.n)     # [0,0,0,0,0,0,0,0]
    self.b = 0

    self.X = X
    self.Y = Y

    for i in range(self.no_of_iteration):
      
      self.update_weight()


  def update_weight(self):

    # y^ formula --> sigmod function
    y_hat = 1 / (1 + np.exp(-(self.X.dot(self.w) + self.b )))

    # derivatives
    dw = (1/self.m)*np.dot(self.X.T , (y_hat - self.Y)) 
    db = (1/self.m)*np.sum(y_hat - self.Y)

    self.w = self.w - self.learning_rate * dw
    self.b = self.b - self.learning_rate * db



  # sigmoid equation and decision boundary
  def predict(self):
    Y_pred = 1 / (1 + np.exp(-(self.X.dot(self.w) + self.b )))
    Y_pred = np.where(Y_pred>.5,1,0)
    return Y_pred
